import os
from telebot import types
from database import db
from keyboards import Keyboards
from logger import logger

class LogManagement:
    def __init__(self, bot):
        self.bot = bot
        self.realtime_logs = {}  # {chat_id: {'bot_name': name, 'file': file_object, 'position': pos}}
    
    def get_log_lines(self, file_path: str, num_lines: int = 20):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()[-num_lines:]
            return ''.join(lines)
        except Exception as e:
            logger.log(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}", 'error')
            return None
    
    def handle_bot_logs(self, message: types.Message, bot_name: str, lines_count: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤ –±–æ—Ç–∞"""
        chat_id = message.chat.id
        log_path = db.get_bot_log_path(bot_name)
        
        if not log_path:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –¥–ª—è –±–æ—Ç–∞ {bot_name}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        if not os.path.exists(log_path):
            self.bot.send_message(
                chat_id,
                f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {log_path}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        logs = self.get_log_lines(log_path, lines_count)
        if logs:
            self.bot.send_message(
                chat_id,
                f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {lines_count} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –±–æ—Ç–∞ {bot_name}:\n"
                f"<code>{logs}</code>",
                parse_mode='HTML',
                reply_markup=Keyboards.bot_actions(bot_name)
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
    
    def handle_download_logs(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
        chat_id = message.chat.id
        log_path = db.get_bot_log_path(bot_name)
        
        if not log_path:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –¥–ª—è –±–æ—Ç–∞ {bot_name}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        if not os.path.exists(log_path):
            self.bot.send_message(
                chat_id,
                f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {log_path}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        try:
            with open(log_path, 'rb') as f:
                self.bot.send_document(
                    chat_id,
                    f,
                    caption=f"üìÅ –õ–æ–≥–∏ –±–æ—Ç–∞ {bot_name}",
                    reply_markup=Keyboards.bot_actions(bot_name)
                )
            logger.log(f"–õ–æ–≥–∏ –±–æ—Ç–∞ {bot_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.username}")
        except Exception as e:
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: {str(e)}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            logger.log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤: {str(e)}", 'error')
    
    def handle_realtime_logs(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        chat_id = message.chat.id
        log_path = db.get_bot_log_path(bot_name)
        
        if not log_path:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –¥–ª—è –±–æ—Ç–∞ {bot_name}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        if not os.path.exists(log_path):
            self.bot.send_message(
                chat_id,
                f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {log_path}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            return
        
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–∞–π–ª–µ
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                position = f.tell()
            
            self.realtime_logs[chat_id] = {
                'bot_name': bot_name,
                'file_path': log_path,
                'position': position
            }
            
            self.bot.send_message(
                chat_id,
                f"üîç –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                "–ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /stop_realtime",
                reply_markup=Keyboards.back_button()
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            self.check_log_updates(chat_id)
        except Exception as e:
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
            logger.log(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ realtime –ª–æ–≥–æ–≤: {str(e)}", 'error')
    
    def check_log_updates(self, chat_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–≥–æ–≤ –¥–ª—è realtime —Ä–µ–∂–∏–º–∞"""
        if chat_id not in self.realtime_logs:
            return
        
        log_info = self.realtime_logs[chat_id]
        bot_name = log_info['bot_name']
        file_path = log_info['file_path']
        position = log_info['position']
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                f.seek(position)
                new_lines = f.read()
                
                if new_lines:
                    self.bot.send_message(
                        chat_id,
                        f"üîÑ –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∞—Ö {bot_name}:\n"
                        f"<code>{new_lines}</code>",
                        parse_mode='HTML'
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                log_info['position'] = f.tell()
                self.realtime_logs[chat_id] = log_info
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                import threading
                timer = threading.Timer(5.0, self.check_log_updates, args=[chat_id])
                timer.start()
        except Exception as e:
            logger.log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ª–æ–≥–æ–≤: {str(e)}", 'error')
            self.stop_realtime_logs(chat_id)
            self.bot.send_message(
                chat_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}\n"
                "–†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=Keyboards.bot_actions(bot_name)
            )
    
    def stop_realtime_logs(self, chat_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ realtime —Ä–µ–∂–∏–º–∞"""
        if chat_id in self.realtime_logs:
            bot_name = self.realtime_logs[chat_id]['bot_name']
            del self.realtime_logs[chat_id]
            self.bot.send_message(
                chat_id,
                f"‚èπ –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ—Ç–∞ {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=Keyboards.bot_actions(bot_name)
            )