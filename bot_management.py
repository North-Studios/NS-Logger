from telebot import types

from config import Config
from database import db
from keyboards import Keyboards
from logger import logger


class BotManagement:
    def __init__(self, bot):
        self.waiting_for_new_admin = None
        self.waiting_for_admin_to_remove = None
        self.bot = bot
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.user_states = {}  # {chat_id: {'state': 'waiting_for_X', 'data': {...}}}

    def _set_state(self, chat_id, state, data=None):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_states[chat_id] = {
            'state': state,
            'data': data or {}
        }

    def _get_state(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(chat_id, {})

    def _clear_state(self, chat_id):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if chat_id in self.user_states:
            del self.user_states[chat_id]

    def handle_add_bot(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        self._set_state(chat_id, 'waiting_for_bot_name')
        self.bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞:",
            reply_markup=Keyboards.back_button()
        )

    def handle_bot_name(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
        chat_id = message.chat.id
        bot_name = message.text

        if bot_name == "üîô –ù–∞–∑–∞–¥":
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        self._set_state(chat_id, 'waiting_for_log_path', {'bot_name': bot_name})
        self.bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ª–æ–≥–∞–º –¥–ª—è –±–æ—Ç–∞ {bot_name}:",
            reply_markup=Keyboards.back_button()
        )

    def handle_log_path(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ –ª–æ–≥–∞–º"""
        chat_id = message.chat.id
        log_path = message.text

        if log_path == "üîô –ù–∞–∑–∞–¥":
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        state = self._get_state(chat_id)
        bot_name = state.get('data', {}).get('bot_name')

        if not bot_name:
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –±–æ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        if db.add_bot(bot_name, log_path, message.from_user.username):
            self.bot.send_message(
                chat_id,
                f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–ü—É—Ç—å –∫ –ª–æ–≥–∞–º: {log_path}",
                reply_markup=Keyboards.main_menu()
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ë–æ—Ç —Å –∏–º–µ–Ω–µ–º {bot_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
                reply_markup=Keyboards.main_menu()
            )

        self._clear_state(chat_id)

    def handle_add_admin(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        self._set_state(chat_id, 'waiting_for_new_admin', {'bot_name': bot_name})
        self.bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ {bot_name} (–±–µ–∑ @):",
            reply_markup=Keyboards.back_button()
        )

    def handle_new_admin(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
        chat_id = message.chat.id
        new_admin = message.text

        if new_admin == "üîô –ù–∞–∑–∞–¥":
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        state = self._get_state(chat_id)
        bot_name = state.get('data', {}).get('bot_name')

        if not bot_name:
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return

        if db.add_admin(bot_name, new_admin):
            self.bot.send_message(
                chat_id,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{new_admin} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )

        self._clear_state(chat_id)

    def handle_remove_admin(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        admins = db.get_bot_admins(bot_name)
        if not admins:
            self.bot.send_message(
                chat_id,
                f"–£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                reply_markup=Keyboards.main_menu()
            )
            return

        self.bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ {bot_name}:",
            reply_markup=Keyboards.back_button()
        )
        self.waiting_for_admin_to_remove[chat_id] = bot_name

    def handle_admin_to_remove(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        chat_id = message.chat.id
        admin_to_remove = message.text

        if admin_to_remove == "üîô –ù–∞–∑–∞–¥":
            del self.waiting_for_admin_to_remove[chat_id]
            self.bot.send_message(
                chat_id,
                "–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        bot_name = self.waiting_for_admin_to_remove.get(chat_id)
        if not bot_name:
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return

        if db.remove_admin(bot_name, admin_to_remove):
            self.bot.send_message(
                chat_id,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )

        del self.waiting_for_admin_to_remove[chat_id]

    def handle_back(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        chat_id = message.chat.id
        self._clear_state(chat_id)
        self.bot.send_message(
            chat_id,
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=Keyboards.main_menu()
        )

    def handle_remove_admin(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        admins = db.get_bot_admins(bot_name)
        if not admins:
            self.bot.send_message(
                chat_id,
                f"–£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
                reply_markup=Keyboards.main_menu()
            )
            return

        self._set_state(chat_id, 'waiting_for_admin_to_remove', {'bot_name': bot_name})
        self.bot.send_message(
            chat_id,
            f"–í–≤–µ–¥–∏—Ç–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–æ—Ç–∞ {bot_name}:",
            reply_markup=Keyboards.back_button()
        )

    def handle_admin_to_remove(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        chat_id = message.chat.id
        admin_to_remove = message.text

        if admin_to_remove == "üîô –ù–∞–∑–∞–¥":
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )
            return

        state = self._get_state(chat_id)
        bot_name = state.get('data', {}).get('bot_name')

        if not bot_name:
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return

        if db.remove_admin(bot_name, admin_to_remove):
            self.bot.send_message(
                chat_id,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )
        else:
            self.bot.send_message(
                chat_id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{admin_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞ {bot_name}!",
                reply_markup=Keyboards.main_menu()
            )

        self._clear_state(chat_id)

    def handle_admin_management(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        bots = db.get_bot_list()
        if not bots:
            self.bot.send_message(
                chat_id,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return

        self._set_state(chat_id, 'admin_management')
        self.bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏:",
            reply_markup=Keyboards.bot_list(bots)
        )

    def handle_bot_selection_for_admin(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
        chat_id = message.chat.id
        bot_name = message.text[2:]  # –£–±–∏—Ä–∞–µ–º "ü§ñ " –≤ –Ω–∞—á–∞–ª–µ

        self.bot.send_message(
            chat_id,
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞ {bot_name}:",
            reply_markup=Keyboards.admin_actions(bot_name)
        )
        self._clear_state(chat_id)

    def handle_global_admins(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        current_admins = ", ".join(f"@{admin}" for admin in Config.ADMINS)
        self.bot.send_message(
            chat_id,
            f"–¢–µ–∫—É—â–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã:\n{current_admins}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Ç–æ–ª—å–∫–æ username, –±–µ–∑ @):",
            reply_markup=Keyboards.back_button()
        )
        self._set_state(chat_id, 'waiting_for_global_admins')

    def handle_remove_bot(self, message: types.Message, bot_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        chat_id = message.chat.id
        username = message.from_user.username

        if username not in Config.ADMINS:
            self.bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(
            types.KeyboardButton(f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å {bot_name}"),
            types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
        )

        self.bot.send_message(
            chat_id,
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ {bot_name}?",
            reply_markup=markup
        )
        self._set_state(chat_id, 'confirm_bot_removal', {'bot_name': bot_name})

    def handle_confirm_removal(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
        chat_id = message.chat.id
        state = self._get_state(chat_id)
        bot_name = state.get('data', {}).get('bot_name')

        if not bot_name:
            self._clear_state(chat_id)
            self.bot.send_message(
                chat_id,
                "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –±–æ—Ç–∞.",
                reply_markup=Keyboards.main_menu()
            )
            return

        if message.text == f"‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å {bot_name}":
            if db.remove_bot(bot_name):
                self.bot.send_message(
                    chat_id,
                    f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                    reply_markup=Keyboards.main_menu()
                )
            else:
                self.bot.send_message(
                    chat_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ {bot_name}!",
                    reply_markup=Keyboards.main_menu()
                )
        else:
            self.bot.send_message(
                chat_id,
                "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=Keyboards.main_menu()
            )

        self._clear_state(chat_id)
