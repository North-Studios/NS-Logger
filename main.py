import os
from telebot import TeleBot
from telebot.types import Message
from config import Config
from database import db
from logger import logger
from keyboards import Keyboards
from bot_management import BotManagement
from log_management import LogManagement

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(Config.BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
bot_management = BotManagement(bot)
log_management = LogManagement(bot)

@bot.message_handler(commands=['start'])
def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat_id = message.chat.id
    username = message.from_user.username
    
    if username not in Config.ADMINS:
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        logger.log(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}", 'warning')
        return
    
    bot.send_message(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NS Logger!\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∞–º–∏ –¥—Ä—É–≥–∏—Ö –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=Keyboards.main_menu()
    )
    logger.log(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")

@bot.message_handler(func=lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤")
def list_bots(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –±–æ—Ç–æ–≤"""
    chat_id = message.chat.id
    username = message.from_user.username
    
    if username not in Config.ADMINS:
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bots = db.get_bot_list()
    if not bots:
        bot.send_message(
            chat_id,
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞.",
            reply_markup=Keyboards.main_menu()
        )
        return
    
    bot.send_message(
        chat_id,
        "ü§ñ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤:",
        reply_markup=Keyboards.bot_list(bots)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
@bot.message_handler(func=lambda message:
    message.text.startswith("ü§ñ ") and
    not bot_management._get_state(message.chat.id).get('state') == 'admin_management')
def handle_bot_selected(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞"""
    bot_name = message.text[2:]
    bot.send_message(
        message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –±–æ—Ç: {bot_name}",
        reply_markup=Keyboards.bot_actions(bot_name)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
@bot.message_handler(func=lambda message:
    message.text.startswith("ü§ñ ") and
    bot_management._get_state(message.chat.id).get('state') == 'admin_management')
def handle_bot_selected_for_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    bot_management.handle_bot_selection_for_admin(message)

@bot.message_handler(func=lambda message: message.text.startswith("üìÑ –õ–æ–≥–∏ "))
def handle_show_logs(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤"""
    chat_id = message.chat.id
    text = message.text
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    if "(20 —Å—Ç—Ä–æ–∫)" in text:
        bot_name = text.replace("üìÑ –õ–æ–≥–∏ ", "").replace(" (20 —Å—Ç—Ä–æ–∫)", "")
        lines_count = 20
    elif "(50 —Å—Ç—Ä–æ–∫)" in text:
        bot_name = text.replace("üìÑ –õ–æ–≥–∏ ", "").replace(" (50 —Å—Ç—Ä–æ–∫)", "")
        lines_count = 50
    else:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    log_management.handle_bot_logs(message, bot_name, lines_count)

@bot.message_handler(func=lambda message: message.text.startswith("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ "))
def handle_download_logs(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤"""
    bot_name = message.text.replace("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ ", "")
    log_management.handle_download_logs(message, bot_name)

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞")
def handle_add_bot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    bot_management.handle_add_bot(message)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@bot.message_handler(func=lambda message:
    bot_management._get_state(message.chat.id).get('state') == 'waiting_for_bot_name')
def handle_bot_name_input(message: Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management.handle_back(message)
    else:
        bot_management.handle_bot_name(message)

@bot.message_handler(func=lambda message:
    bot_management._get_state(message.chat.id).get('state') == 'waiting_for_log_path')
def handle_log_path_input(message: Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management.handle_back(message)
    else:
        bot_management.handle_log_path(message)

@bot.message_handler(func=lambda message:
    bot_management._get_state(message.chat.id).get('state') == 'waiting_for_new_admin')
def handle_new_admin_input(message: Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management.handle_back(message)
    else:
        bot_management.handle_new_admin(message)

@bot.message_handler(func=lambda message:
    bot_management._get_state(message.chat.id).get('state') == 'waiting_for_admin_to_remove')
def handle_admin_to_remove_input(message: Message):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management.handle_back(message)
    else:
        bot_management.handle_admin_to_remove(message)

@bot.message_handler(func=lambda message: message.text.startswith("‚ùå –£–¥–∞–ª–∏—Ç—å "))
def handle_remove_bot(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞"""
    bot_name = message.text.replace("‚ùå –£–¥–∞–ª–∏—Ç—å ", "")
    bot_management.handle_remove_bot(message, bot_name)

@bot.message_handler(func=lambda message: message.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
def handle_admin_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    bot_management.handle_admin_management(message)

@bot.message_handler(func=lambda message:
message.text.startswith("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ") or
message.text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ") or
message.text.startswith("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ "))
def handle_bot_admin_actions(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–¥–º–∏–Ω–∞–º–∏ –±–æ—Ç–∞"""
    if message.text.startswith("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ "):
        bot_name = message.text.replace("üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ", "")
        admins = db.get_bot_admins(bot_name)
        if admins:
            bot.reply_to(message,
                         f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ {bot_name}:\n" +
                         "\n".join(f"‚Ä¢ @{admin}" for admin in admins),
                         reply_markup=Keyboards.admin_actions(bot_name))
        else:
            bot.reply_to(message,
                         f"–£ –±–æ—Ç–∞ {bot_name} –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                         reply_markup=Keyboards.admin_actions(bot_name))

    elif message.text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ "):
        bot_name = message.text.replace("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ", "")
        bot_management.handle_add_admin(message, bot_name)

    elif message.text.startswith("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ "):
        bot_name = message.text.replace("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ", "")
        bot_management.handle_remove_admin(message, bot_name)

@bot.message_handler(func=lambda message: message.text.startswith("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ "))
def handle_add_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    bot_name = message.text.replace("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ ", "")
    bot_management.handle_add_admin(message, bot_name)

@bot.message_handler(func=lambda message: message.text.startswith("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ "))
def handle_remove_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    bot_name = message.text.replace("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ", "")
    bot_management.handle_remove_admin(message, bot_name)

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def handle_back(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=Keyboards.main_menu()
    )

@bot.message_handler(func=lambda message:
    bot_management._get_state(message.chat.id).get('state') == 'admin_management' and
    message.text.startswith("ü§ñ "))
def handle_bot_selected_for_admin_management(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    bot_name = message.text[2:]
    bot.send_message(
        message.chat.id,
        f"–í—ã–±—Ä–∞–Ω –±–æ—Ç: {bot_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:",
        reply_markup=Keyboards.admin_actions(bot_name)
    )
    bot_management._clear_state(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_id = message.chat.id
    username = message.from_user.username

    if username not in Config.ADMINS:
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
        return

    bot.send_message(
        chat_id,
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode='HTML',
        reply_markup=Keyboards.settings_menu()
    )

@bot.message_handler(func=lambda message: message.text in ["üîô –ù–∞–∑–∞–¥", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"])
def handle_back(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    chat_id = message.chat.id
    bot.send_message(
        chat_id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=Keyboards.main_menu()
    )


@bot.message_handler(func=lambda message: message.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∞–¥–º–∏–Ω–∞–º–∏")
def handle_global_admins(message: Message):
    bot_management.handle_global_admins(message)

@bot.message_handler(func=lambda message:
bot_management._get_state(message.chat.id).get('state') == 'waiting_for_global_admins')
def handle_new_global_admins(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management._clear_state(message.chat.id)
        handle_settings(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ .env —Ñ–∞–π–ª
    new_admins = [name.strip() for name in message.text.split(',')]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
    Config.ADMINS = new_admins
    bot.send_message(
        message.chat.id,
        "‚úÖ –°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=Keyboards.settings_menu()
    )
    bot_management._clear_state(message.chat.id)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def handle_statistics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chat_id = message.chat.id
    username = message.from_user.username

    if username not in Config.ADMINS:
        bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    bot_count = len(db.get_bot_list())
    total_admins = sum(len(db.get_bot_admins(bot)) for bot in db.get_bot_list())

    bot.send_message(
        chat_id,
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –±–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {bot_count}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤: {len(Config.ADMINS)}",
        parse_mode='HTML',
        reply_markup=Keyboards.settings_menu()
    )

@bot.message_handler(func=lambda message:
bot_management._get_state(message.chat.id).get('state') == 'waiting_for_global_admins' and
message.text != "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")  # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
def handle_new_global_admins(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot_management._clear_state(message.chat.id)
        handle_settings(message)
        return

    new_admins = [name.strip() for name in message.text.split(',') if name.strip()]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env)
    Config.ADMINS = new_admins

    bot.send_message(
        message.chat.id,
        f"‚úÖ –°–ø–∏—Å–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω:\n{', '.join(f'@{admin}' for admin in new_admins)}",
        reply_markup=Keyboards.settings_menu()
    )
    bot_management._clear_state(message.chat.id)

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    Config.check_config()
    
    logger.log("NS Logger –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()